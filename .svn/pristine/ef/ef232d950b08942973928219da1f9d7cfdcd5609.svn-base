import { DrawerProps } from "@fluentui/react-components";
import * as React from "react";
import "../../src/App.css"
import { Link } from "react-router-dom";
import { Drawer } from "@fluentui/react-components";
import {
  Hamburger,
  NavCategory,
  NavCategoryItem,
  NavDrawer,
  NavDrawerBody,
  NavDrawerHeader,
  NavDrawerProps,
  NavItem,
  NavSubItem,
  NavSubItemGroup,
} from "@fluentui/react-nav-preview";

import {
  Tooltip,
} from "@fluentui/react-components";


// const useStyles = makeStyles({
//   root: {
//     overflow: "hidden",
//     display: "flex",
//     height: "600px",
//   },
//   content: {
//     flex: "1",
//     padding: "16px",
//     display: "grid",
//     justifyContent: "flex-start",
//     alignItems: "flex-start",
//   },
//   field: {
//     display: "flex",
//     marginTop: "4px",
//     marginLeft: "8px",
//     flexDirection: "column",
//     gridRowGap: tokens.spacingVerticalS,
//   },
// });


interface NavBarProps {
  fields: {
    key: string;
    label: string;
    icon: JSX.Element;
    path: string;
    children?: { key: string; label: string; path: string }[];
  }[];
}
type DrawerType = Required<DrawerProps>["type"];

const NavBar: React.FC<NavBarProps & Partial<NavDrawerProps>> = ({ fields, ...props }) => {
  const [isOpen, setIsOpen] = React.useState(true);
  const [type, setType] = React.useState<DrawerType>("inline");
  const [isMultiple, setIsMultiple] = React.useState(true);
  React.useEffect(() => {
    const updateType = () => {
      if (window.innerWidth < 910) {
        setType("overlay"); 
      } else {
        setType("inline"); 
      }
    };

   
    updateType();

  
    window.addEventListener('resize', updateType);

    return () => window.removeEventListener('resize', updateType);
  }, []);
  const renderHamburgerWithToolTip = () => {
    return (
      <Tooltip content="Navigation" relationship="label">
        <Hamburger onClick={() => setIsOpen(!isOpen)} />

      </Tooltip>
    );
  };

  return (
    <div style={{ display: "flex", height: "100vh" }}>


      
      <NavDrawer
        open={isOpen}
        type={type}
        multiple={isMultiple}
      >
      <Drawer
        open={isOpen}
        className="drawer"
        type={type}
        onOpenChange={(_, { open }) => setIsOpen(open)}
        style={{height: "100vh" , width:"260px"}}
      >
       
        
        <NavDrawerHeader>{renderHamburgerWithToolTip()}</NavDrawerHeader>

        <NavDrawerBody className="navItem">
          {fields.map((field: any) =>
            field.children ? (
              <NavCategory value={field.key}>
                <NavCategoryItem value={field.key} icon={field.icon}>
                  {field.label}
                </NavCategoryItem>
                <NavSubItemGroup key={field.key} title={field.label}>
                  {field.children.map((child: any) => (
                    <NavSubItem key={child.key} value={child.key}>
                      <Link to={child.path} style={{ textDecoration: "none", color: "inherit", display: "flex", alignItems: "center" }}>
                        {child.label}
                      </Link>
                    </NavSubItem>

                  ))}
                </NavSubItemGroup>
              </NavCategory>
            ) : (
              
                <Link to={field.path} style={{ textDecoration: "none", color: "inherit", display: "flex", alignItems: "center" }}>
              <NavItem key={field.key} icon={field.icon} value={field.key} >{field.label}</NavItem> 
                </Link>
               
              

            )
          )}

        </NavDrawerBody>
      </Drawer>
      
      </NavDrawer>



      <div style={{ flexGrow:1 , overflow: "auto" }}>
        {!isOpen && renderHamburgerWithToolTip()}


      </div>

    </div>
  );
};
export default NavBar;
