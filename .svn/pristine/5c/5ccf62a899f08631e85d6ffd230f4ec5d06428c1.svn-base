import * as React from "react";
import tableConfig from "./tableConfig2.json";
import FormPage from "./FormPage";
import { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';
import { PrimaryButton, DefaultButton } from '@fluentui/react/lib/Button';
import {
  EditRegular,
  DeleteRegular,
  OpenRegular,
  PresenceBlockedRegular,
} from "@fluentui/react-icons";
import {
  TableBody,
  TableCell,
  TableRow,
  Table,
  TableHeader,
  TableHeaderCell,
  TableCellLayout,
  Button,
  useArrowNavigationGroup,
} from "@fluentui/react-components";

// Interfaces
interface DeleteConfirmationDialogProps {
  isDeleteBox: boolean;
  onDelete: () => void; // Callback when deletion is confirmed
  onCancel: () => void; // Callback when deletion is cancelled
}

interface TableItem {
  senderID: string;
  format: string;
  type: string;
  status: string;
  creationdatetime: string;
}

const columns = tableConfig.columns;
const actions = tableConfig.actions;

interface DynamicTableProps {
  data: TableItem[];
  setData: React.Dispatch<React.SetStateAction<TableItem[]>>; // This is the setter function for the data
}

const DynamicTable: React.FC<DynamicTableProps> = ({ data, setData }) => {
  const keyboardNavAttr = useArrowNavigationGroup({ axis: "grid" });
  const [isPopupOpen, setIsPopupOpen] = React.useState(false);
  const [isDeleteBox, setDelete] = React.useState(false);
  const [selectedRowData, setSelectedRowData] = React.useState<TableItem | null>(null);
  const [selectedRowID, setSelectedRowID] = React.useState<string | null>(null);

  // Open the popup for the row details
  const openPopup = (rowData: TableItem) => {
    setSelectedRowData(rowData);
    setIsPopupOpen(true);
  };

  // Close the popup for row details
  const closePopup = () => {
    setIsPopupOpen(false);
    setSelectedRowData(null);
  };

  // Open delete confirmation dialog
  const openDelete = (senderID: string) => {
    setSelectedRowID(senderID);
    setDelete(true);
  };

  // Delete the row with the given senderID
  const deleteRow = () => {
    if (selectedRowID) {
      const newData = data.filter((item) => item.senderID !== selectedRowID);
      setData(newData); // Update the state with the new data
      setDelete(false);  // Close the delete dialog
    }
  };

  return (
    <div style={{ width: "100%", overflowX: "auto" }}>
      <Table {...keyboardNavAttr} role="grid" aria-label="Dynamic Table" style={{ width: "100%", tableLayout: "fixed" }}>
        <TableHeader>
          <TableRow>
            {columns.map((column) => (
              <TableHeaderCell key={column.key}>{column.title}</TableHeaderCell>
            ))}
            <TableHeaderCell>Actions</TableHeaderCell>
          </TableRow>
        </TableHeader>
        <TableBody>
          {data.map((item, index) => (
            <TableRow key={index} style={{ backgroundColor: index % 2 === 0 ? "#f9f9f9" : "#e0e0e0" }}>
              {columns.map((column) => (
                <TableCell key={column.key} role="gridcell">
                  <TableCellLayout>{item[column.dataIndex as keyof TableItem]}</TableCellLayout>
                </TableCell>
              ))}
              <TableCell role="gridcell">
                <div style={{ display: "flex", gap: "8px" }}>
                  {actions.map((action, actionIndex) => (
                    <Button
                      key={actionIndex}
                      icon={
                        action.config.icon === "edit" ? (
                          <EditRegular />
                        ) : action.config.icon === "delete" ? (
                          <DeleteRegular />
                        ) : action.config.icon === "block" ? (
                          <PresenceBlockedRegular />
                        ) : (
                          <OpenRegular />
                        )
                      }
                      onClick={() => {
                        if (action.config.icon === "delete") {
                          openDelete(item.senderID); // Open delete confirmation dialog
                        } else if (action.status === "Edit") {
                          openPopup(item); // Open the popup for edit
                        }
                      }}
                      style={{ color: action.style.color }}
                    />
                  ))}
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      {isPopupOpen && <FormPage formData={selectedRowData} />}
      <DeleteConfirmationDialog
        isDeleteBox={isDeleteBox}
        onDelete={deleteRow} // Pass the delete function here
        onCancel={() => setDelete(false)} // Handle cancel action
      />
    </div>
  );
};

export default DynamicTable;

// Delete Confirmation Dialog
const DeleteConfirmationDialog: React.FC<DeleteConfirmationDialogProps> = ({ isDeleteBox, onDelete, onCancel }) => {
  return (
    <Dialog
      hidden={!isDeleteBox}
      onDismiss={onCancel}
      dialogContentProps={{
        type: DialogType.normal,
        title: 'Are you sure you want to delete?',
        subText: 'This action cannot be undone.',
      }}
      modalProps={{
        isBlocking: true,
        styles: { main: { maxWidth: 450 } },
      }}
    >
      <DialogFooter>
        <DefaultButton onClick={onCancel} text="Cancel" />
        <PrimaryButton onClick={onDelete} text="Delete" />
      </DialogFooter>
    </Dialog>
  );
};
