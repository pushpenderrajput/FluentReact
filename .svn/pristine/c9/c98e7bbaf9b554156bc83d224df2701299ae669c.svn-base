import * as React from "react";
import tableConfig from "./tableConfig2.json";
import PopupForm from "./PopUpForm";
import { Dialog, DialogType, DialogFooter } from "@fluentui/react/lib/Dialog";
import { PrimaryButton, DefaultButton } from "@fluentui/react/lib/Button";
import {
  EditRegular,
  DeleteRegular,
  OpenRegular,
  PresenceBlockedRegular,
} from "@fluentui/react-icons";
import {
  TableBody,
  TableCell,
  TableRow,
  Table,
  TableHeader,
  TableHeaderCell,
  TableCellLayout,
  Button,
  useArrowNavigationGroup,
} from "@fluentui/react-components";

interface TableItem {
  senderID: string;
  format: string;
  type: string;
  status: string;
  creationdatetime: string;
}

const columns = tableConfig.columns;
const actions = tableConfig.actions;

interface DynamicTableProps {
  data: TableItem[];
}

interface DeleteConfirmationDialogProps {
  isDeleteBox: boolean;
  onDelete: () => void;
  onCancel: () => void;
}

const DynamicTable: React.FC<DynamicTableProps> = ({ data }) => {
  const keyboardNavAttr = useArrowNavigationGroup({ axis: "grid" });
  const [isPopupOpen, setIsPopupOpen] = React.useState(false);
  const [selectedRowData, setSelectedRowData] = React.useState<TableItem | null>(null);
  const [isDeleteBox, setDelete] = React.useState(false);
  const [selectedRowID, setSelectedRowID] = React.useState<string | null>(null);

  const openPopup = (rowData: TableItem) => {
    setSelectedRowData(rowData);
    setIsPopupOpen(true);
  };

  const closePopup = () => {
    setIsPopupOpen(false);
  };

  const openDelete = (senderID: string) => {
    setSelectedRowID(senderID);
    setDelete(true);
  };

  const handleDelete = () => {
    if (selectedRowID) {
      console.log("Deleting senderID:", selectedRowID);
      // Implement actual delete logic here, e.g., updating state
    }
    setDelete(false);
    setSelectedRowID(null);
  };

  return (
    <div>
      <Table {...keyboardNavAttr} role="grid" aria-label="Dynamic Table">
        <TableHeader>
          <TableRow>
            {columns.map((column) => (
              <TableHeaderCell key={column.key}>{column.title}</TableHeaderCell>
            ))}
            <TableHeaderCell>Actions</TableHeaderCell>
          </TableRow>
        </TableHeader>
        <TableBody>
          {data.map((item, index) => (
            <TableRow key={index}>
              {columns.map((column) => (
                <TableCell key={column.key} role="gridcell">
                  <TableCellLayout>{item[column.dataIndex as keyof TableItem]}</TableCellLayout>
                </TableCell>
              ))}
              <TableCell role="gridcell">
                <div style={{ display: "flex", gap: "8px" }}>
                  {actions.map((action, actionIndex) => (
                    <Button
                      key={actionIndex}
                      icon={
                        action.config.icon === "edit" ? <EditRegular /> :
                        action.config.icon === "delete" ? <DeleteRegular /> :
                        action.config.icon === "block" ? <PresenceBlockedRegular /> :
                        <OpenRegular />
                      }
                      onClick={() => {
                        if (action.config.icon === "delete") {
                          openDelete(item.senderID);
                        } else if (action.status === "Edit") {
                          openPopup(item);
                        }
                      }}
                      style={{ color: action.style.color }}
                    />
                  ))}
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>

      {isPopupOpen && <PopupForm formData={selectedRowData} closePopup={closePopup} />}
      
      <DeleteConfirmationDialog
        isDeleteBox={isDeleteBox}
        onDelete={handleDelete}
        onCancel={() => setDelete(false)}
      />
    </div>
  );
};

const DeleteConfirmationDialog: React.FC<DeleteConfirmationDialogProps> = ({ isDeleteBox, onDelete, onCancel }) => {
  return (
    <Dialog
      hidden={!isDeleteBox}
      onDismiss={onCancel}
      dialogContentProps={{
        type: DialogType.normal,
        title: "Are you sure you want to delete?",
        subText: "This action cannot be undone.",
      }}
      modalProps={{
        isBlocking: true,
        styles: { main: { maxWidth: 450 } },
      }}
    >
      <DialogFooter>
        <DefaultButton onClick={onCancel} text="Cancel" />
        <PrimaryButton onClick={onDelete} text="Delete" />
      </DialogFooter>
    </Dialog>
  );
};

export default DynamicTable;
