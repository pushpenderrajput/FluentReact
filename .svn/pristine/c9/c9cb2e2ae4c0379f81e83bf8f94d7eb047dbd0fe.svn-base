import * as React from "react";
import { Combobox, Option, Tag, TagGroup } from "@fluentui/react-components";
import type { ComboboxProps } from "@fluentui/react-components";

interface OptionType {
  option_label: string;
  value: string;
}

interface Field {
  field_type: string;
  field_id: string;
  field_label: string;
  field_placeholder: string;
  field_options: OptionType[];
}

interface SelectElementProps extends ComboboxProps {
  field: Field;
}

const MultiSelect: React.FC<SelectElementProps> = ({ field, ...props }) => {
  const [searchTerm, setSearchTerm] = React.useState("");
  const [selectedValues, setSelectedValues] = React.useState<OptionType[]>([]);
  const [isOpen, setIsOpen] = React.useState(false);

  const filteredOptions = field.field_options.filter((option) =>
    option.option_label.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSelect = (_: any, data: { optionValue?: string }) => {
    if (!data.optionValue) return;

    const selectedOption = field.field_options.find((option) => option.value === data.optionValue);
    if (selectedOption && !selectedValues.some((item) => item.value === data.optionValue)) {
      setSelectedValues([...selectedValues, selectedOption]);
    }
    setSearchTerm(""); 
  };

  const handleDeselect = (value: string) => {
    setSelectedValues(selectedValues.filter((item) => item.value !== value));
  };

  return (
    <div style={{display:"flex"}}>
      <label htmlFor={field.field_id}>{field.field_label}</label>

      <Combobox
        id={field.field_id}
        {...props}
        onOptionSelect={handleSelect}
        multiselect={field.field_type === "multiSelect"}
        value={selectedValues.map((item) => item.option_label).join(", ")}
        placeholder={selectedValues.length > 0 ? "" : field.field_placeholder}
        onOpenChange={(_, data) => setIsOpen(data.open)}
      >
        {filteredOptions.map((option) => (
          <Option key={option.value} value={option.value}>
            {option.option_label}
          </Option>
        ))}
      </Combobox>

      
      {selectedValues.length > 0 && (
        <TagGroup>
          {selectedValues.map((item) => (
            <Tag key={item.value} shape="rounded">
              {item.option_label}
              <span
                style={{ marginLeft: "8px", cursor: "pointer", color: "red" }}
                onClick={() => handleDeselect(item.value)}
              >
                âœ–
              </span>
            </Tag>
          ))}
        </TagGroup>
      )}
    </div>
  );
};

export default MultiSelect;
